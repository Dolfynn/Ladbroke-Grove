%{
#include "nodes.h"
#include "parser.tab.h" // Include the parser header generated by Bison/Yacc
%}

%option noyywrap
%option yylineno

%%
"numberting"        { return NUMBERTING; }
"letterting"        { return LETTERTING; }
"decimalting"       { return DECIMALTING; }
"baredigits"        { return BAREDIGITS; }
"nuing"             { return NUING; }
"return"            { return RETURN; }
"innit"             { return INNIT; }
"innit_nah"         { return INNIT_NAH; }
"sideting"          { return SIDETING; }
"mainting"          { return MAINTING; }
"whilengers"        { return WHILENGERS; }
"do-whilengers"     { return DO_WHILENGERS; }
"waffle"            { return WAFFLE; }
"chat-to-man"       { return CHAT_TO_MAN; }
"shush"             { return SHUSH; }
"mandem"            { return MANDEM; }
"wagwan"            { return WAGWAN; }
"chunker?"          { return CHUNKER; }
"&"                 { return AMPERSAND; }
"lay-on"            { return DEREFERENCE; }
"//"                { return LINE_COMMENT; }
"/*"                { return BLOCK_COMMENT; }

[0-9]+               { yylval.intval = atoi(yytext); return INTEGER_LITERAL; }
[0-9]+"."[0-9]+      { yylval.floatval = atof(yytext); return FLOAT_LITERAL; }
[a-zA-Z_][a-zA-Z0-9_]* { yylval.strval = strdup(yytext); return IDENTIFIER; }
"="                  { return EQUALS; }
"+"                  { return PLUS; }
"-"                  { return MINUS; }
"*"                  { return MULT; }
"/"                  { return DIV; }
";"                  { return SEMI; }
[ \t\r\n\f]          ; /* ignore whitespace */
.                    { return yytext[0]; } /* Catch all for single characters */

%%


